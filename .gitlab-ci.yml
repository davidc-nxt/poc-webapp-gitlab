stages:
  - build-and-deploy

variables:
  AWS_DEFAULT_REGION: us-east-1
  IMAGE_NAME: poc-webapp-gitlab
  GITOPS_REPO: poc-gitops-manifests

build-and-deploy:
  stage: build-and-deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - apk add --no-cache git aws-cli
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
  script:
    - |
      # Get ECR repository URI
      REPO_URI=$(aws ecr-public describe-repositories --repository-names $IMAGE_NAME --region us-east-1 --query 'repositories[0].repositoryUri' --output text)
      IMAGE_URI="$REPO_URI:$CI_COMMIT_SHA"
      
      # Build Docker image
      docker build \
        --build-arg CI_PLATFORM=gitlab \
        --build-arg COMMIT_SHA=$CI_COMMIT_SHA \
        --build-arg BUILD_TIME=$(date -Iseconds) \
        --build-arg APP_VERSION=1.0.0 \
        --build-arg IMAGE_NAME=$IMAGE_URI \
        -t $IMAGE_URI \
        -t $REPO_URI:latest .
      
      # Push images to ECR Public
      docker push $IMAGE_URI
      docker push $REPO_URI:latest
      
      # Clone GitOps repository using GitHub token
      git clone https://$GITOPS_TOKEN@github.com/$CI_PROJECT_NAMESPACE/$GITOPS_REPO.git gitops
      cd gitops
      
      # Update image tag in GitLab app manifest
      sed -i "s|image: .*/$IMAGE_NAME:.*|image: $IMAGE_URI|g" k8s-manifests/gitlab/deployment.yaml
      
      # Commit and push changes to trigger Argo CD sync
      git config user.name "GitLab CI"
      git config user.email "ci@gitlab.com"
      git add k8s-manifests/gitlab/deployment.yaml
      git commit -m "ðŸš€ Update GitLab app image to $CI_COMMIT_SHA"
      git push origin main
      
      echo "âœ… GitLab app image updated: $IMAGE_URI"
      echo "ðŸ”„ Argo CD will automatically deploy the changes"
  only:
    - main 